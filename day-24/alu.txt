(0)                     * ((25) * (((10 === input[0] ? 1 : 0) === 0 ? 1 : 0)) + 1) + (((25) * (((10 === input[0] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[0] + 15) * (((10 === input[0] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_0 / 1))   * (((y_0) * (0) + 25) * (((((x_0) * (0) + z_0 % 26) + 12 === input[1] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_0) * (0) + 25) * (((((x_0) * (0) + z_0 % 26) + 12 === input[1] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[1] + 8) * (((((x_0) * (0) + z_0 % 26) + 12 === input[1] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_1 / 1))   * (((y_1) * (0) + 25) * (((((x_1) * (0) + z_1 % 26) + 15 === input[2] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_1) * (0) + 25) * (((((x_1) * (0) + z_1 % 26) + 15 === input[2] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[2] + 2) * (((((x_1) * (0) + z_1 % 26) + 15 === input[2] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_2 / 26))  * (((y_2) * (0) + 25) * (((((x_2) * (0) + z_2 % 26) + -9 === input[3] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_2) * (0) + 25) * (((((x_2) * (0) + z_2 % 26) + -9 === input[3] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[3] + 6) * (((((x_2) * (0) + z_2 % 26) + -9 === input[3] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_3 / 1))   * (((y_3) * (0) + 25) * (((((x_3) * (0) + z_3 % 26) + 15 === input[4] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_3) * (0) + 25) * (((((x_3) * (0) + z_3 % 26) + 15 === input[4] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[4] + 13) * (((((x_3) * (0) + z_3 % 26) + 15 === input[4] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_4 / 1))   * (((y_4) * (0) + 25) * (((((x_4) * (0) + z_4 % 26) + 10 === input[5] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_4) * (0) + 25) * (((((x_4) * (0) + z_4 % 26) + 10 === input[5] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[5] + 4) * (((((x_4) * (0) + z_4 % 26) + 10 === input[5] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_5 / 1))   * (((y_5) * (0) + 25) * (((((x_5) * (0) + z_5 % 26) + 14 === input[6] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_5) * (0) + 25) * (((((x_5) * (0) + z_5 % 26) + 14 === input[6] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[6] + 1) * (((((x_5) * (0) + z_5 % 26) + 14 === input[6] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_6 / 26))  * (((y_6) * (0) + 25) * (((((x_6) * (0) + z_6 % 26) + -5 === input[7] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_6) * (0) + 25) * (((((x_6) * (0) + z_6 % 26) + -5 === input[7] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[7] + 9) * (((((x_6) * (0) + z_6 % 26) + -5 === input[7] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_7 / 1))   * (((y_7) * (0) + 25) * (((((x_7) * (0) + z_7 % 26) + 14 === input[8] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_7) * (0) + 25) * (((((x_7) * (0) + z_7 % 26) + 14 === input[8] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[8] + 5) * (((((x_7) * (0) + z_7 % 26) + 14 === input[8] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_8 / 26))  * (((y_8) * (0) + 25) * (((((x_8) * (0) + z_8 % 26) + -7 === input[9] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_8) * (0) + 25) * (((((x_8) * (0) + z_8 % 26) + -7 === input[9] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[9] + 13) * (((((x_8) * (0) + z_8 % 26) + -7 === input[9] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_9 / 26))  * (((y_9) * (0) + 25) * (((((x_9) * (0) + z_9 % 26) + -12 === input[10] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_9) * (0) + 25) * (((((x_9) * (0) + z_9 % 26) + -12 === input[10] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[10] + 9) * (((((x_9) * (0) + z_9 % 26) + -12 === input[10] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_10 / 26)) * (((y_10) * (0) + 25) * (((((x_10) * (0) + z_10 % 26) + -10 === input[11] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_10) * (0) + 25) * (((((x_10) * (0) + z_10 % 26) + -10 === input[11] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[11] + 6) * (((((x_10) * (0) + z_10 % 26) + -10 === input[11] ? 1 : 0) === 0 ? 1 : 0))',
(Math.trunc(z_11 / 26)) * (((y_11) * (0) + 25) * (((((x_11) * (0) + z_11 % 26) + -1 === input[12] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_11) * (0) + 25) * (((((x_11) * (0) + z_11 % 26) + -1 === input[12] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[12] + 2) * (((((x_11) * (0) + z_11 % 26) + -1 === input[12] ? 1 : 0) === 0 ? 1 : 0))'
(Math.trunc(z_12 / 26)) * (((y_12) * (0) + 25) * (((((x_12) * (0) + z_12 % 26) + -11 === input[13] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((((y_12) * (0) + 25) * (((((x_12) * (0) + z_12 % 26) + -11 === input[13] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[13] + 2) * (((((x_12) * (0) + z_12 % 26) + -11 === input[13] ? 1 : 0) === 0 ? 1 : 0))'




((            0 / 1))   * (25 * (((              10  === input[0]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * (((              10  === input[0]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[0]  + 15) * (((              10  === input[0]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_0 / 1))   * (25 * ((((z_0 % 26)  + 12  === input[1]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_0 % 26)  + 12  === input[1]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[1]  + 8)  * ((((z_0 % 26)  + 12  === input[1]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_1 / 1))   * (25 * ((((z_1 % 26)  + 15  === input[2]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_1 % 26)  + 15  === input[2]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[2]  + 2)  * ((((z_1 % 26)  + 15  === input[2]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_2 / 26))  * (25 * ((((z_2 % 26)  + -9  === input[3]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_2 % 26)  + -9  === input[3]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[3]  + 6)  * ((((z_2 % 26)  + -9  === input[3]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_3 / 1))   * (25 * ((((z_3 % 26)  + 15  === input[4]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_3 % 26)  + 15  === input[4]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[4]  + 13) * ((((z_3 % 26)  + 15  === input[4]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_4 / 1))   * (25 * ((((z_4 % 26)  + 10  === input[5]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_4 % 26)  + 10  === input[5]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[5]  + 4)  * ((((z_4 % 26)  + 10  === input[5]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_5 / 1))   * (25 * ((((z_5 % 26)  + 14  === input[6]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_5 % 26)  + 14  === input[6]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[6]  + 1)  * ((((z_5 % 26)  + 14  === input[6]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_6 / 26))  * (25 * ((((z_6 % 26)  + -5  === input[7]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_6 % 26)  + -5  === input[7]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[7]  + 9)  * ((((z_6 % 26)  + -5  === input[7]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_7 / 1))   * (25 * ((((z_7 % 26)  + 14  === input[8]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_7 % 26)  + 14  === input[8]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[8]  + 5)  * ((((z_7 % 26)  + 14  === input[8]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_8 / 26))  * (25 * ((((z_8 % 26)  + -7  === input[9]  ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_8 % 26)  + -7  === input[9]  ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[9]  + 13) * ((((z_8 % 26)  + -7  === input[9]  ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_9 / 26))  * (25 * ((((z_9 % 26)  + -12 === input[10] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_9 % 26)  + -12 === input[10] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[10] + 9)  * ((((z_9 % 26)  + -12 === input[10] ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_10 / 26)) * (25 * ((((z_10 % 26) + -10 === input[11] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_10 % 26) + -10 === input[11] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[11] + 6)  * ((((z_10 % 26) + -10 === input[11] ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_11 / 26)) * (25 * ((((z_11 % 26) + -1  === input[12] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_11 % 26) + -1  === input[12] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[12] + 2)  * ((((z_11 % 26) + -1  === input[12] ? 1 : 0) === 0 ? 1 : 0))
(Math.trunc(z_12 / 26)) * (25 * ((((z_12 % 26) + -11 === input[13] ? 1 : 0) === 0 ? 1 : 0)) + 1) + ((25 * ((((z_12 % 26) + -11 === input[13] ? 1 : 0) === 0 ? 1 : 0)) + 1) * (0) + input[13] + 2)  * ((((z_12 % 26) + -11 === input[13] ? 1 : 0) === 0 ? 1 : 0))


if (z' % 26) + C == w'
  (Math.trunc(z_0 / 1))   * (1)
if (z' % 26) + C != w'
  (Math.trunc(z_0 / 1))   * (26) + (input[1]  + 8)

consts = [
  [1, 10, 15]
  [1, 12, 8]
  [1, 15, 2]
  [26, -9, 6]
  [1, 15, 13]
  [1, 10, 4]
  [1, 14, 1]
  [26, -5, 9]
  [1, 14, 5]
  [26, -7, 13]
  [26, -12, 9]
  [26, -10, 6]
  [26, -1, 2]
  [26, -11, 2]
]
