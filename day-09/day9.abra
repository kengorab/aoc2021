import readFile from io

val input = if readFile("./input.ex") |input|
  input.trim().lines().map(l => {
    l.split("").map(i => i.parseInt() ?: -1)
  })
else []

func min(nums: Int[]): Int {
  var M = 1000000
  for n in nums {
    if n < M
      M = n
  }
  M
}

func part1(): Int {
  var sum = 0

  for row, y in input {
    for cell, x in row {
      // this is annoying to do, esp since array indexing wraps in abra
      val neighbors = [
        (input[y-1]?:[])[x-1]?:-1, (input[y-1]?:[])[x]?:-1, (input[y-1]?:[])[x+1]?:-1,
        row[x-1]?:-1, row[x+1]?:-1,
        (input[y+1]?:[])[x-1]?:-1, (input[y+1]?:[])[x]?:-1, (input[y+1]?:[])[x+1]?:-1,
      ].filter(v => v != -1)
      println(neighbors)

      val m = min(neighbors)
      if m > cell {
        sum = sum + (cell + 1)
      }
    }
  }

  sum
}
println(part1())
